#version 460 core

layout (local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
layout (rgba32f, binding = 0) uniform image2D screen;

struct Particle {
    vec3 position;
    float rotation;
};

layout (binding = 1) buffer SSBO_1 {
    Particle particles[];
};

uniform uint time;
uniform uint count;

uint hash(uint state) {
        state ^= 2747636419u;
        state *= 2654435769u;
        state ^= state >> 16;
        state *= 2654435769u;
        state ^= state >> 16;
        state *= 2654435769u;
        return state;
}

uint pRandNum(uint min, uint max, uint hashState) {
    uint randNum = hash(hashState);
    uint clampedNum = randNum % (max - min + 1) + min;
    return clampedNum;
}

float update(float dT) {
    float PI = 3.151594;
    ivec2 id = ivec2(gl_GlobalInvocationID.xy);
    uint screenArea = (1920 / 2) * (1080 / 2);
    float speed = 1.0f;

    vec3 pos = particles[id.x].position;

    const float a = 10;
    const float b = 28;
    const float c = 8/3;

    float dx = (a * (pos.y - pos.x)) * dT;
    float dy = (pos.x * (b - pos.z) - pos.y) * dT;
    float dz = (pos.x * pos.y - c * pos.z) * dT;

    vec3 newPos = pos + vec3(dx, dy, dz);
    if (dx > 20 || dy > 20 || dz > 20) {
        return 0.0f;
    }

    // if (newPos.x < 0 || newPos.x >= 960 || newPos.y < 0 || newPos.y >= 590) {
    //     newPos.x = min(960 - 0.01, max(0, newPos.x));
    //     newPos.y = min(590 - 0.01, max(0, newPos.y));
    //     particles[id.x].rotation = pRandNum(0, 360, state);
    // }

    particles[id.x].position = newPos;
    return 1.0;
    // particles[id.x].rotation = pRandNum(0, 360, state);
}

void main() {
    ivec2 pixelCoords = ivec2(gl_GlobalInvocationID.xy);
    vec4 pixel = vec4(1.0f);

    if (gl_GlobalInvocationID.x < count) {
        float brightness = update(0.001f);
        vec2 position = particles[gl_GlobalInvocationID.x].position.xy * 10;
        pixelCoords = ivec2(position.x + 1920 / 2, position.y + 1080 / 2);
        pixel[3] = brightness;
    }

    imageStore(screen, pixelCoords, pixel);
}
