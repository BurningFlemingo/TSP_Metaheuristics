#version 460 core

layout (local_size_x = 16, local_size_y = 1, local_size_z = 1) in;
layout (rgba32f, binding = 0) uniform image2D screen;
layout (rgba32f, binding = 1) uniform image2D trail;

struct Particle {
    vec4 position;
    vec4 color;
};

layout (binding = 1) buffer SSBO_1 {
    Particle particles[];
};

uniform uint time;
uniform uint count;
uniform float deltaTime;

uint hash(uint state) {
        state ^= 2747636419u;
        state *= 2654435769u;
        state ^= state >> 16;
        state *= 2654435769u;
        state ^= state >> 16;
        state *= 2654435769u;
        return state;
}

uint pRandNum(uint min, uint max, uint hashState) {
    uint randNum = hash(hashState);
    uint clampedNum = randNum % (max - min + 1) + min;
    return clampedNum;
}

void update(float dT) {
    float PI = 3.151594;
    ivec2 id = ivec2(gl_GlobalInvocationID.xy);
    uint screenArea = (1920 / 2) * (1080 / 2);

    float speed = 0.03f;

    float change = speed * deltaTime;
    if (change > 0.01) {
        change = 0.01;
    }

    vec3 pos = particles[id.x].position.xyz;

    const float a = 10;
    const float b = 28;
    const float c = 8/3;

    float dx = (a * (pos.y - pos.x)) * change;
    float dy = (pos.x * (b - pos.z) - pos.y) * change;
    float dz = (pos.x * pos.y - c * pos.z) * change;

    vec3 newPos = pos + vec3(dx, dy, dz);

    // if (newPos.x < 0 || newPos.x >= 960 || newPos.y < 0 || newPos.y >= 590) {
    //     newPos.x = min(960 - 0.01, max(0, newPos.x));
    //     newPos.y = min(590 - 0.01, max(0, newPos.y));
    //     particles[id.x].rotation = pRandNum(0, 360, state);
    // }

    particles[id.x].position.xyz = newPos;
}

void main() {
    ivec2 pixelCoords = ivec2(gl_GlobalInvocationID.xy);
    vec4 pixel = vec4(0.0f, 0.0f, 0.0f, 1.0f);

    if (gl_GlobalInvocationID.x < count) {
        update(deltaTime);
        vec2 position = particles[gl_GlobalInvocationID.x].position.xy * 5;
        pixelCoords = ivec2(position.x + 960 / 2, position.y + 540 / 2);
        pixel = particles[gl_GlobalInvocationID.x].color;
    }

    imageStore(screen, pixelCoords, pixel);
    imageStore(trail, pixelCoords, pixel);
}
