#version 460 core

layout (local_size_x = 64, local_size_y = 1, local_size_z = 1) in;
layout (rgba32f, binding = 0) uniform image2D trail;
layout (rgba32f, binding = 1) uniform image2D screen;
layout (rgba32f, binding = 2) readonly uniform image2D TSP;

struct Particle {
    vec4 position;
    vec4 velocity;
};

layout (binding = 3) buffer SSBO_1 {
    Particle particles[];
};

uniform uint time;
uniform uint count;
uniform float deltaTime;

uint hash(uint state) {
        state ^= 2747636419u;
        state *= 2654435769u;
        state ^= state >> 16;
        state *= 2654435769u;
        state ^= state >> 16;
        state *= 2654435769u;
        return state;
}

uint pRandNum(uint min, uint max, uint hashState) {
    uint randNum = hash(hashState);
    uint clampedNum = randNum % (max - min + 1) + min;
    return clampedNum;
}

float castRay(vec2 origin, vec2 direction, float size) {
    ivec2 id = ivec2(gl_GlobalInvocationID.xy);

    float xSlope = direction.y / direction.x;
    float ySlope = direction.x / direction.y; 
    vec2 rayStepSize = vec2(sqrt(1 + (xSlope * xSlope)), sqrt(1 + (ySlope * ySlope)));

    vec2 rayLength = vec2(0, 0);

    // used to prevent ray from interacting with particles own trail and city
    float distanceFromOrigin = 21;
    ivec2 cellIntermediate = ivec2(origin + direction * distanceFromOrigin);  // used to truncate
    vec2 cell = vec2(cellIntermediate);

    vec2 step = vec2(0);

    if (direction.x < 0) {
        step.x = -1;
        rayLength.x = (origin.x - (cell.x)) * rayStepSize.x;
    } else {
        step.x = 1;
        rayLength.x = ((cell.x + 1) - origin.x) * rayStepSize.x;
    }

    if (direction.y < 0) {
        step.y = -1;
        rayLength.y = (origin.y - (cell.y)) * rayStepSize.y;
    } else {
        step.y = 1;
        rayLength.y = ((cell.y + 1) - origin.y) * rayStepSize.y;
    }

    bool intersection = false;
    float distance = 0;
    float accumulator = 0.0;
    float threshold = 0.1;
    while(!intersection && distance < size) {
        if (rayLength.x < rayLength.y) {
            cell.x += step.x;
            rayLength.x += rayStepSize.x;
            distance = rayLength.x;
        } else {
            cell.y += step.y;
            distance = rayLength.y;
            rayLength.y += rayStepSize.y;
        }

        if (imageLoad(TSP, ivec2(cell.x, cell.y)).w > 0) {
            accumulator += 1000000;
        }
        float concentration = imageLoad(trail, ivec2(cell.x, cell.y)).w;
        if (concentration > threshold) {
            accumulator += concentration;
        }
    }

    return accumulator;
}

float update(float dT) {
    float PI = 3.151594;
    ivec2 id = ivec2(gl_GlobalInvocationID.xy);
    uint screenArea = (1920 / 2) * (1080 / 2);
    uint state = id.x * time * screenArea;

    float speed = 2.0f;
    float steerStrength = 2;
    float wanderStrength = 1;

    vec2 pos = particles[id.x].position.xy;
    vec2 velocity = particles[id.x].velocity.xy;
    float rotation = particles[id.x].position.w;

    rotation += pRandNum(0, 360, state) * PI / 180;
    vec2 direction = vec2(cos(rotation), sin(rotation)) * wanderStrength;

    vec2 disiredVelocity = direction * deltaTime;
    vec2 disiredSteeringForce = (disiredVelocity - velocity) * steerStrength;
    vec2 acceleration = vec2(min(disiredSteeringForce, steerStrength)) / 1;

    velocity = vec2(min(velocity + acceleration * deltaTime, speed));
    pos += velocity * deltaTime;

    float angle = atan(velocity.x, velocity.y);

    particles[id.x].position = vec4(pos, 0.0f, angle);
    particles[id.x].position.w = rotation;
    particles[id.x].velocity = vec4(velocity, 0.0, 0.0);

    return 1.0;
}

void main() {
    ivec2 pixelCoords = ivec2(gl_GlobalInvocationID.xy);
    vec4 pixel = vec4(0.0f, 0.0f, 0.0f, 0.0f);

    if (gl_GlobalInvocationID.x < count) {
        float concentrationOfTrail = update(deltaTime);
        vec2 position = particles[gl_GlobalInvocationID.x].position.xy;
        pixelCoords = ivec2(position.x, position.y);
        pixel = vec4(0.9, 0.0, 0.1, concentrationOfTrail);
    }

    imageStore(screen, pixelCoords, vec4(1.0));
    imageStore(trail, pixelCoords, pixel);
}
